syntax = "proto3";
package quelle;

service SearchProvider {
	rpc Search(SearchRequest) returns (SearchResult) {};
	rpc Fetch(FetchRequest) returns (FetchResult) {};
	rpc Page(PageRequest) returns (PageResult) {};
}
message SearchRequest {
	repeated SearchClause clauses = 1;
	SearchControls controls = 2;
	uint64 count = 3;
}
message SearchResult {
	bool success = 1;
	repeated string errors = 2;
	repeated string warnings = 3;
	uint64 cursor = 4;
	uint64 remainder = 5;
	string session = 6;
	map<uint64, string> records = 7;
	string summary = 8;
	SearchRequest enrichedRequest = 9;
}
message FetchRequest {
	string session = 1;
	uint64 cursor = 2;
	uint64 count = 3;
}
message FetchResult {
	bool success = 1;
	repeated string errors = 2;
	repeated string warnings = 3;
	uint64 cursor = 4;
	uint64 remainder = 5;
	string session = 6;
	map<uint64, string> records = 7;
}
message PageRequest {
	string session = 1;
	string format = 2;
	uint64 page = 3;
}
message PageResult {
	bool success = 1;
	repeated string errors = 2;
	repeated string warnings = 3;
	string result = 4;
	PageRequest request = 5;
}
message SearchControls {
	string domain = 1;
	int32 span = 2;
	int32 strict = 3;
}
message SearchClause {
	string syntax = 1;
	repeated SearchFragment fragments = 2;
	string segment = 3;
	enum Polarity {
		UNDEFINED = 0;
		POSITIVE = 1;
		NEGATIVE = -1;
	}
	Polarity polarity = 4;
}
message SearchFragment {
	repeated uint32 positionAspects = 1;
	repeated TokenVector anyOf = 2;
	string text = 3;
}
message TokenFeature {
	string feature = 1;
}
message TokenMatch {
	string condition = 1;
	repeated TokenFeature anyFeature = 2;
}
message TokenVector {
	string specification = 1;
	repeated TokenMatch matchAll = 2;
}